{"version":"1.127.1","results":[{"check_id":"semgrep-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute","path":"app.py","start":{"line":84,"col":5,"offset":1819},"end":{"line":90,"col":70,"offset":2018},"extra":{"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.formatted-sql-query","path":"app.py","start":{"line":90,"col":5,"offset":1953},"end":{"line":90,"col":70,"offset":2018},"extra":{"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","path":"app.py","start":{"line":90,"col":5,"offset":1953},"end":{"line":90,"col":70,"offset":2018},"extra":{"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.injection.tainted-sql-string","path":"app.py","start":{"line":90,"col":17,"offset":1965},"end":{"line":90,"col":69,"offset":2017},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.flask.security.injection.tainted-sql-string","path":"app.py","start":{"line":90,"col":17,"offset":1965},"end":{"line":90,"col":69,"offset":2017},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.injection.sql.sql-injection-db-cursor-execute","path":"app.py","start":{"line":111,"col":5,"offset":2485},"end":{"line":121,"col":6,"offset":2814},"extra":{"message":"User-controlled data from a request is passed to 'execute()'. This could lead to a SQL injection and therefore protected information could be leaked. Instead, use django's QuerySets, which are built with query parameterization and therefore not vulnerable to sql injection. For example, you could use `Entry.objects.filter(date=2006)`.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["vuln"],"likelihood":"MEDIUM","impact":"HIGH","confidence":"MEDIUM"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.lang.security.audit.formatted-sql-query","path":"app.py","start":{"line":119,"col":5,"offset":2693},"end":{"line":121,"col":6,"offset":2814},"extra":{"message":"Detected possible formatted SQL query. Use parameterized queries instead.","metadata":{"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"references":["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"],"category":"security","technology":["python"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.sqlalchemy.security.sqlalchemy-execute-raw-query","path":"app.py","start":{"line":119,"col":5,"offset":2693},"end":{"line":121,"col":6,"offset":2814},"extra":{"message":"Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.","metadata":{"cwe":["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy"],"cwe2022-top25":true,"cwe2021-top25":true,"subcategory":["audit"],"likelihood":"LOW","impact":"HIGH","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.injection.tainted-sql-string","path":"app.py","start":{"line":120,"col":9,"offset":2715},"end":{"line":120,"col":101,"offset":2807},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using the Django object-relational mappers (ORM) instead of raw SQL queries.","metadata":{"cwe":["CWE-915: Improperly Controlled Modification of Dynamically-Determined Object Attributes"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"references":["https://docs.djangoproject.com/en/3.0/topics/security/#sql-injection-protection"],"category":"security","technology":["django"],"subcategory":["audit"],"impact":"LOW","likelihood":"MEDIUM","confidence":"LOW"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.flask.security.injection.tainted-sql-string","path":"app.py","start":{"line":120,"col":9,"offset":2715},"end":{"line":120,"col":101,"offset":2807},"extra":{"message":"Detected user input used to manually construct a SQL string. This is usually bad practice because manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection to steal or modify contents of the database. Instead, use a parameterized query which is available by default in most database engines. Alternatively, consider using an object-relational mapper (ORM) such as SQLAlchemy which will protect your queries.","metadata":{"cwe":["CWE-704: Incorrect Type Conversion or Cast"],"owasp":["A01:2017 - Injection","A03:2021 - Injection"],"references":["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql","https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm","https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"],"category":"security","technology":["sqlalchemy","flask"],"subcategory":["vuln"],"impact":"MEDIUM","likelihood":"MEDIUM","confidence":"MEDIUM"},"severity":"ERROR","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.django-no-csrf-token","path":"app\\templates\\pages\\auth.html","start":{"line":5,"col":9,"offset":85},"end":{"line":12,"col":16,"offset":567},"extra":{"message":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.","metadata":{"category":"security","cwe":"CWE-352: Cross-Site Request Forgery (CSRF)","references":["https://docs.djangoproject.com/en/4.2/howto/csrf/"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"]},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.django-no-csrf-token","path":"app\\templates\\pages\\profile.html","start":{"line":6,"col":9,"offset":135},"end":{"line":14,"col":16,"offset":852},"extra":{"message":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.","metadata":{"category":"security","cwe":"CWE-352: Cross-Site Request Forgery (CSRF)","references":["https://docs.djangoproject.com/en/4.2/howto/csrf/"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"]},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.python.django.security.django-no-csrf-token","path":"app\\templates\\pages\\profile.html","start":{"line":21,"col":17,"offset":1064},"end":{"line":26,"col":24,"offset":1387},"extra":{"message":"Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks.","metadata":{"category":"security","cwe":"CWE-352: Cross-Site Request Forgery (CSRF)","references":["https://docs.djangoproject.com/en/4.2/howto/csrf/"],"confidence":"MEDIUM","likelihood":"MEDIUM","impact":"MEDIUM","subcategory":["audit"],"technology":["django"]},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.html.security.audit.missing-integrity","path":"reports\\SCA\\result-OSVscanner.html","start":{"line":6,"col":3,"offset":76},"end":{"line":6,"col":98,"offset":171},"extra":{"message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.","metadata":{"category":"security","technology":["html"],"cwe":["CWE-353: Missing Support for Integrity Check"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"confidence":"LOW","references":["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}},{"check_id":"semgrep-rules.html.security.audit.missing-integrity","path":"reports\\SCA\\result-OSVscanner.html","start":{"line":8,"col":3,"offset":256},"end":{"line":8,"col":119,"offset":372},"extra":{"message":"This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows for the browser to verify that externally hosted files (for example from a CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the externally hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 'integrity' attribute for all externally hosted files.","metadata":{"category":"security","technology":["html"],"cwe":["CWE-353: Missing Support for Integrity Check"],"owasp":["A08:2021 - Software and Data Integrity Failures"],"confidence":"LOW","references":["https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures"],"subcategory":["audit"],"likelihood":"LOW","impact":"LOW"},"severity":"WARNING","fingerprint":"requires login","lines":"requires login","validation_state":"NO_VALIDATOR","engine_kind":"OSS"}}],"errors":[{"code":3,"level":"warn","type":["PartialParsing",[{"path":"reports\\IaC\\results.html","start":{"line":14,"col":350,"offset":0},"end":{"line":14,"col":429,"offset":79}},{"path":"reports\\IaC\\results.html","start":{"line":16,"col":357,"offset":0},"end":{"line":16,"col":436,"offset":79}},{"path":"reports\\IaC\\results.html","start":{"line":18,"col":358,"offset":0},"end":{"line":18,"col":437,"offset":79}},{"path":"reports\\IaC\\results.html","start":{"line":21,"col":116,"offset":0},"end":{"line":21,"col":272,"offset":156}},{"path":"reports\\IaC\\results.html","start":{"line":22,"col":51,"offset":0},"end":{"line":22,"col":215,"offset":164}},{"path":"reports\\IaC\\results.html","start":{"line":22,"col":490,"offset":0},"end":{"line":22,"col":569,"offset":79}},{"path":"reports\\IaC\\results.html","start":{"line":26,"col":369,"offset":0},"end":{"line":26,"col":448,"offset":79}}]],"message":"Syntax error at line reports\\IaC\\results.html:14:\n `&& apt-get install python3-venv python3-pip curl -y && python3 -m venv work_env` was unexpected","path":"reports\\IaC\\results.html","spans":[{"file":"reports\\IaC\\results.html","start":{"line":14,"col":350,"offset":0},"end":{"line":14,"col":429,"offset":79}},{"file":"reports\\IaC\\results.html","start":{"line":16,"col":357,"offset":0},"end":{"line":16,"col":436,"offset":79}},{"file":"reports\\IaC\\results.html","start":{"line":18,"col":358,"offset":0},"end":{"line":18,"col":437,"offset":79}},{"file":"reports\\IaC\\results.html","start":{"line":21,"col":116,"offset":0},"end":{"line":21,"col":272,"offset":156}},{"file":"reports\\IaC\\results.html","start":{"line":22,"col":51,"offset":0},"end":{"line":22,"col":215,"offset":164}},{"file":"reports\\IaC\\results.html","start":{"line":22,"col":490,"offset":0},"end":{"line":22,"col":569,"offset":79}},{"file":"reports\\IaC\\results.html","start":{"line":26,"col":369,"offset":0},"end":{"line":26,"col":448,"offset":79}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"app\\templates\\pages\\profile.html","start":{"line":1,"col":5,"offset":0},"end":{"line":4,"col":32,"offset":82}},{"path":"app\\templates\\pages\\profile.html","start":{"line":47,"col":5,"offset":0},"end":{"line":48,"col":19,"offset":47}}]],"message":"Syntax error at line app\\templates\\pages\\profile.html:1:\n `{% extends 'base.html' %}\r\n\r\n    {% block body %}\r\n    {% include 'header.html' %}` was unexpected","path":"app\\templates\\pages\\profile.html","spans":[{"file":"app\\templates\\pages\\profile.html","start":{"line":1,"col":5,"offset":0},"end":{"line":4,"col":32,"offset":82}},{"file":"app\\templates\\pages\\profile.html","start":{"line":47,"col":5,"offset":0},"end":{"line":48,"col":19,"offset":47}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"app\\templates\\pages\\auth.html","start":{"line":1,"col":5,"offset":0},"end":{"line":3,"col":21,"offset":49}},{"path":"app\\templates\\pages\\auth.html","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":19,"offset":14}}]],"message":"Syntax error at line app\\templates\\pages\\auth.html:1:\n `{% extends 'base.html' %}\r\n\r\n    {% block body %}` was unexpected","path":"app\\templates\\pages\\auth.html","spans":[{"file":"app\\templates\\pages\\auth.html","start":{"line":1,"col":5,"offset":0},"end":{"line":3,"col":21,"offset":49}},{"file":"app\\templates\\pages\\auth.html","start":{"line":15,"col":5,"offset":0},"end":{"line":15,"col":19,"offset":14}}]},{"code":3,"level":"warn","type":["PartialParsing",[{"path":"app\\templates\\pages\\index.html","start":{"line":1,"col":5,"offset":0},"end":{"line":4,"col":32,"offset":82}},{"path":"app\\templates\\pages\\index.html","start":{"line":15,"col":5,"offset":0},"end":{"line":16,"col":19,"offset":47}}]],"message":"Syntax error at line app\\templates\\pages\\index.html:1:\n `{% extends 'base.html' %}\r\n\r\n    {% block body %}\r\n    {% include 'header.html' %}` was unexpected","path":"app\\templates\\pages\\index.html","spans":[{"file":"app\\templates\\pages\\index.html","start":{"line":1,"col":5,"offset":0},"end":{"line":4,"col":32,"offset":82}},{"file":"app\\templates\\pages\\index.html","start":{"line":15,"col":5,"offset":0},"end":{"line":16,"col":19,"offset":47}}]}],"paths":{"scanned":[".semgrepignore","app\\static\\img\\favicon.ico","app\\static\\img\\logo.png","app\\static\\styles\\style.css","app\\templates\\base.html","app\\templates\\footer.html","app\\templates\\header.html","app\\templates\\pages\\auth.html","app\\templates\\pages\\contacts.html","app\\templates\\pages\\index.html","app\\templates\\pages\\post.html","app\\templates\\pages\\profile.html","app.py","Dockerfile","kics.yml","reports\\IaC\\results.html","reports\\SCA\\output_opensca.json","reports\\SCA\\result-OSVscanner.html","requirements.txt"]},"time":{"rules":[],"rules_parse_time":0.2609992027282715,"profiling_times":{"config_time":11.184178829193115,"core_time":1.1179168224334717,"ignores_time":0.0004544258117675781,"total_time":12.303210496902466},"parsing_time":{"total_time":0.05099821090698242,"per_file_time":{"mean":0.006374776363372801,"std_dev":0.00013123108717749687},"very_slow_files":[]},"targets":[],"total_bytes":0,"max_memory_bytes":341516224},"skipped_rules":[]}