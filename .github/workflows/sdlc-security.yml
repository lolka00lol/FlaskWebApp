---
name: SDLC-Security
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:  # if commanted its work!
  # SCA:
  #   name: OSV Scanning project
  #   permissions:
  #     security-events: write
  #     actions: read
  #     contents: read
  #   uses: google/osv-scanner-action/.github/workflows/osv-scanner-reusable.yml@v2.0.3
  #   with:
  #     scan-args: |-
  #       --lockfile=./requirements.txt
  #       --no-ignore
  #     results-file-name: osv-results.sarif
  #     upload-sarif: true
  #     fail-on-vuln: false
  # SAST:
  #   name: Semgrep (SAST) scanning
  #   permissions:
  #     contents: read
  #     security-events: write
  #   runs-on: ubuntu-latest
  #   container:
  #     image: semgrep/semgrep
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  #     - name: Scan project by semgrep
  #       run: semgrep scan -c ./semgrep-rules/ --sarif > ./semgrep-results.sarif
  #       env:
  #         PYTHONUTF8: 1 # Without it impossible use RU encode
  #     - name: Upload artifact GitHub
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: semgrep-result
  #         path: ./semgrep-results.sarif
  #         if-no-files-found: error
  #         retention-days: 1
  #     - name: SARIF to GitHub Security Dashboard
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: ./semgrep-results.sarif
  #       if: always() # Upload it in anyway
  # IaC-Scan:
  #   name: Infrastructure as Code scanning
  #   permissions:
  #     contents: read
  #     security-events: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  #     - name: Create reports folder
  #       run:  mkdir -p ./reports
  #     - name: Run KICS Scan using config
  #       uses: checkmarx/kics-github-action@v2.1.10
  #       with:
  #         path: ./
  #         output_formats: html,sarif
  #         output_path: reports/
  #         ignore_on_exit: results
  #         exclude_paths: "semgrep-rules/,app/,reports/,.github/"
  #     - name: Upload artifact GitHub
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: kics-result
  #         path: ./reports
  #         if-no-files-found: error
  #         retention-days: 1
  #     - name: SARIF to GitHub Security Dashboard
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: ./reports/results.sarif
  #       if: always()
  BuildContainerImage:
    name: Build docker image for current app
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build local container
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          tags: msfwa:latest
          push: false
          load: false
          outputs: type=docker,dest=${{ runner.temp }}/msfwa.tar
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: msfwa
          path: ${{ runner.temp }}/msfwa.tar
  # ContainerScanning:
  #   name: Container scan of Dockerfile
  #   permissions:
  #     contents: read
  #     security-events: write
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v4
  #     - name: Download docker image artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: msfwa
  #         path: ${{ runner.temp }}
  #     - name: Load docker image
  #       run: docker load --input ${{ runner.temp }}/msfwa.tar
  #     - name: Create reports folder
  #       run: mkdir -p ./reports
  #     - name: Scan image
  #       uses: anchore/scan-action@v6
  #       with:
  #         image: "msfwa:latest"
  #         fail-build: false
  #         output-format: sarif
  #         output-file: ./reports/report_grype.sarif
  #     - name: Upload artifact GitHub
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: grype-result
  #         path: ./reports
  #         if-no-files-found: error
  #         retention-days: 1
  #     - name: SARIF to GitHub Security Dashboard
  #       uses: github/codeql-action/upload-sarif@v3
  #       with:
  #         sarif_file: ./reports/report_grype.sarif
  #       if: always()
  DAST:
    name: ZAP by Checkmarx (DAST) scanning
    needs: BuildContainerImage
    permissions:
      contents: read
      actions: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      # Docker download
      - name: Download docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: msfwa
          path: ${{ runner.temp }}
      - name: Load docker image
        run: docker load --input ${{ runner.temp }}/msfwa.tar
      - name: Use Docker image
        run: docker run -d -p 80:5000 msfwa:latest
      # Docker test
      - name: Wait for service to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:80; then
              echo "Service ready"
              break
            else
              echo "Waiting..."
              sleep 5
            fi
          done
      #
      # - name: Add some data in DB for DAST
      #   run: |
      #     curl -s "http://localhost:80/sqlite?query=INSERT INTO users(username,password) VALUES ('Admin','P@ssw0rd')"
      #     curl -s "http://localhost:80/sqlite?query=INSERT INTO news(user_id,title,title_imageurl,description) VALUES (1, 'Test post', 'https://cs13.pikabu.ru/post_img/2023/07/09/10/1688919144178579044.jpg', '<script>alert(`XSS?!`);</script>')"
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: http://localhost:80
          artifact_name: zap_report
          rules_file_name: ./owaspzap.conf
          cmd_options: '-r result.html'
          allow_issue_writing: false
          fail_action: false
    # steps:
    #   - name: Checkout
    #     uses: actions/checkout@v4
    #   - name: Upload OSV results to artifacts
    #     uses: actions/upload-artifact@v4
    #     with:
    #       name: OSV-result
    #       path: ./osv-results.sarif
    #       if-no-files-fount: error
    #       retention-days: 1
